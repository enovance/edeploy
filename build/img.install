#!/bin/bash
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Erwan Velu <erwan.velu@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

LOCAL_PATH=$(dirname $0)
src="$1"
IMG="$2"
ver="$3"
INST="$4"
SERV="$5"
HSERV="$6"
DEBUG="$7"
MODE="$8"
FLASH_IMAGE="$IMG-$ver.img"
VDI_IMAGE="$IMG-$ver.vdi"
FLASH_SIZE=256 #in Megabytes
LOOPBACK_BOOT=NONE
LOOPBACK_DATA=NONE
BOOT_MOUNT_POINT=$(mktemp -d)-$2-$3.tmp

. $LOCAL_PATH/img.embedded

if [ ! -d "$src" ]; then
    echo "Usage: $0 <source dir> <img> <version> <initrd_path> <ip_serv>" 1>&2
    exit 1
fi

step() {
    echo "################################################################"
    echo "$@ ($PROG_NAME)"
    echo "################################################################"
}

fatal_error() {
        echo $1;
        exit 1
}

check_binary() {
        which $1 || fatal_error "$1 is missing"
}

get_fdisk_parameter() {
    FLASH_SIZE=$1 #in MB
    BYTE_SIZE="512"
    FLASH_SECTORS=32
    FLASH_HEADS=64
    ONE_CYLINDER=$(( $FLASH_HEADS * $FLASH_SECTORS * $BYTE_SIZE ))
    FLASH_CYNLINDERS=$(( $FLASH_SIZE * 1024 * 1024 / $ONE_CYLINDER ))
    FLASH_SECTORS_COUNT=$(( $FLASH_SIZE * 1024 *1024 / $BYTE_SIZE ))
    echo "-C $FLASH_CYNLINDERS -S $FLASH_SECTORS -H $FLASH_HEADS"
}

prepare_flash_image() {
    step "Prepare flash image"

    if [ "$MODE" = "health" ]; then
        FLASH_IMAGE="$MODE-$ver.img"
        VDI_IMAGE="$MODE-$ver.vdi"
    fi

    if [ ! -e $FLASH_IMAGE ]; then

        echo "Zeroification in progess"
        dd if=/dev/zero of=$FLASH_IMAGE bs=1M count=$FLASH_SIZE
        sync

        echo "Partionning in progress"
        if [ "$MODE" = "health" ]; then
            sfdisk -uM --force $(get_fdisk_parameter $FLASH_SIZE) $FLASH_IMAGE << EOF
0,10,
10,,L,*
EOF
        else
            sfdisk -uM --force $(get_fdisk_parameter $FLASH_SIZE) $FLASH_IMAGE << EOF
,,L,*
EOF
        fi
    fi
}


losetupsizeopt() {
    OPTION="-s"
    # On older version of losetup, we shall use --sizelimit option
    losetup -h 2>&1 | grep -q '\-\-sizelimit' && OPTION="--sizelimit"
    echo "$OPTION"
}

loop_offset(){
    FLASH_IMAGE=$1
    PARTITION=$2
    PART_OFFSET=$(sfdisk -l $FLASH_IMAGE -uS 2>/dev/null | grep "img${PARTITION}" | tr -d '*' |  awk '{print $2}' | tr -d '+')
    PART_OFFSET_BYTES=$(( $PART_OFFSET * 512 ))
    echo $PART_OFFSET_BYTES
}

loop_size(){
    FLASH_IMAGE=$1
    PARTITION=$2
    PART_SIZE=$(sfdisk -l $FLASH_IMAGE -uM  2>/dev/null | grep "img${PARTITION}" | tr -d '*' | awk '{print $5}' | tr -d '+' )
    PART_SIZE_MB=$(( $PART_SIZE * 1024 ));
    echo $PART_SIZE_MB
}

prepare_flash_fs() {
    step "Prepare flash fs"

    LOOPBACK_BOOT=$(losetup -f)

    #Let's search the next loopback device
    if [ "$MODE" = "health" ]; then
        losetup -o $(loop_offset $FLASH_IMAGE 2) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 2) $LOOPBACK_BOOT $FLASH_IMAGE
        LOOPBACK_DATA=$(losetup -f)
        losetup -o $(loop_offset $FLASH_IMAGE 1) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 1) $LOOPBACK_DATA $FLASH_IMAGE
        echo "Formatting /ahcexport"
        mkfs.vfat -n ahcexport $LOOPBACK_DATA
    else
        losetup -o $(loop_offset $FLASH_IMAGE 1) $(losetupsizeopt) $(loop_size $FLASH_IMAGE 1) $LOOPBACK_BOOT $FLASH_IMAGE
    fi

    echo "Formatting /boot"
    mkfs.ext2 -F -L edeploy_boot $LOOPBACK_BOOT
    tune2fs -i 0 -c 0 $LOOPBACK_BOOT

    sync
}

free_loopbacks() {
    step "Free loopback"

    #Let's clean the loopback devices
    if [ "$LOOPBACK_BOOT" != "NONE" ]; then
            losetup -d $LOOPBACK_BOOT
    fi

    if [ "$LOOPBACK_DATA" != "NONE" ]; then
            losetup -d $LOOPBACK_DATA
    fi

}

mount_flash_fs() {
    step "Mount flash fs"

    mkdir -p $BOOT_MOUNT_POINT
    mount $LOOPBACK_BOOT $BOOT_MOUNT_POINT

    if [ ! `grep $BOOT_MOUNT_POINT /proc/mounts | wc -l` ]; then
        die "Flash System isn't mounted !"
    fi
}

copy_os_to_flash() {
    step "Copy OS to flash"

    cp -f ${src}/boot/vmlinuz* $BOOT_MOUNT_POINT/vmlinuz
    if [ "$MODE" = "health" ]; then
        cp -f ${INST}/health.pxe $BOOT_MOUNT_POINT
    else
        cp -f ${INST}/initrd.pxe $BOOT_MOUNT_POINT
    fi

    if [ -n "$EMBEDDED_OS" ]; then
        mkdir -p $BOOT_MOUNT_POINT/embedded
        cp -f $EMBEDDED_OS $BOOT_MOUNT_POINT/embedded/
        setup_edeploy_conf $BOOT_MOUNT_POINT /etc/ /var/lib/edeploy
        setup_state_file $BOOT_MOUNT_POINT/var/lib/edeploy/config $(basename $EMBEDDED_ROLE)
        for extension in cmdb specs configure; do
            cp -f $EMBEDDED_ROLE.$extension $BOOT_MOUNT_POINT/var/lib/edeploy/config
        done
        # Let's setup the included OS as the default one for this role
        sed -i "s/^set_role.*/set_role('$ROLE_NAME', '$VERSION_ROLE', bootable_disk)/g" $BOOT_MOUNT_POINT/var/lib/edeploy/config/$(basename $EMBEDDED_ROLE).configure
    fi
}

setup_bootloader() {

    KERNEL_OPTIONS="quiet panic=-1 oops=panic USBBOOT=1 rw | $CMDLINE |"
    if [ -z "$ONSUCCESS" ]; then
        ONSUCCESS="halt"
    fi
    if [ -z "$ONFAILURE" ]; then
        ONFAILURE="console"
    fi

    if [ -z "$IP" ]; then
        IP="all:dhcp"
    fi

    mkdir $1/extlinux
    if [ "$MODE" = "health" ]; then
COMMON_ARGS="$KERNEL_OPTIONS SERV=$SERV HSERV=$HSERV DEBUG=$DEBUG UPLOAD_LOG=${UPLOAD_LOG} ONFAILURE=$ONFAILURE ONSUCCESS=$ONSUCCESS IP=$IP"
        if [ -n "$SESSION" ]; then
            COMMON_ARGS="$COMMON_ARGS SESSION=$SESSION"
        fi
        if [ -n "$NONETWORKTEST" ]; then
            COMMON_ARGS="$COMMON_ARGS NONETWORKTEST=1"
        fi
        if [ -n "$RBENCH" ]; then
            COMMON_ARGS="$COMMON_ARGS RBENCH=$RBENCH"
        fi

        cat << EOF >> $1/extlinux/extlinux.conf
TIMEOUT 100
PROMPT 1
UI menu.c32
DEFAULT SAFE
MENU TITLE Automatic Health Check ($ver)
MENU ROWS 13

LABEL SAFE
        MENU DEFAULT
        MENU LABEL Run Benchmark in safe mode ( No Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS

LABEL SAFE1H
        MENU LABEL Run Benchmark in safe mode ( 1H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=60

LABEL SAFE12H
        MENU LABEL Run Benchmark in safe mode (12H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=720

LABEL SAFE24H
        MENU LABEL Run Benchmark in safe mode (24H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=1440

LABEL SAFE48H
        MENU LABEL Run Benchmark in safe mode (48H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=2880

LABEL SAFE72H
        MENU LABEL Run Benchmark in safe mode (72H Smoke Test)
        TEXT HELP
         Run a series of test to estimate system's performance.
         CPU, MEMORY and STORAGE will be benchmarked.
         Test duration will vary regarding the hardware setup.
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS SMOKE=4320

MENU SEPARATOR

LABEL DESTRUCTIVE
        MENU LABEL Run Benchmark in destructive mode ( No Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1

LABEL DESTRUCTIVE1H
        MENU LABEL Run Benchmark in destructive mode ( 1H Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=60

LABEL DESTRUCTIVE12H
        MENU LABEL Run Benchmark in destructive mode (12H Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=720

LABEL DESTRUCTIVE24H
        MENU LABEL Run Benchmark in destructive mode (24h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=1440

LABEL DESTRUCTIVE48H
        MENU LABEL Run Benchmark in destructive mode (48h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=2880

LABEL DESTRUCTIVE72H
        MENU LABEL Run Benchmark in destructive mode (72h Smoke Test)
        TEXT HELP
         Run a destructive write test to storage device in addition of safe mode
                      !!! EXISTING DATA ON STORAGE DEVICE !!!
                      !!!  WILL BE DESTROYED PERMANENTLY  !!!
        ENDTEXT
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /health.pxe
        APPEND $COMMON_ARGS DESTRUCTIVE_MODE=1 SMOKE=4320

EOF
    else
        if [ -n "$EMBEDDED_OS" ]; then
            EMBEDDED_STRING="EMBEDDED=1"
            UPLOAD_LOG=1
        fi
        cat << EOF >> $1/extlinux/extlinux.conf
TOTALTIMEOUT 10
PROMPT 0
DEFAULT FLASH

LABEL FLASH
        SAY Loading OS, please wait
        KERNEL /vmlinuz
        INITRD /initrd.pxe
        APPEND $KERNEL_OPTIONS SERV=$SERV HSERV=$HSERV DEBUG=$DEBUG UPLOAD_LOG=${UPLOAD_LOG} $EMBEDDED_STRING ONFAILURE=$ONFAILURE ONSUCCESS=$ONSUCCESS IP=$IP
EOF
    fi
}

check_embedded_os() {
    if [ -z "$EMBEDDED_OS" ]; then
        return
    fi

    step "Checking Embedded OS"

        if [ ! -f "$EMBEDDED_OS" ]; then
        fatal_error "EMBEDDED_OS variable should reference an existing file"
    fi

        if [ -z "$EMBEDDED_ROLE" ]; then
                fatal_error "EMBEDDED_OS requires an EMBEDDED_ROLE"
        else
                echo "$EMBEDDED_ROLE" | grep '^/' || fatal_error "EMBBEDED_ROLE shall be an absolute path"
        fi

        for extension in cmdb specs configure; do
                if [ ! -f $EMBEDDED_ROLE.$extension ]; then
                        fatal_error "Missing $EMBEDDED_ROLE.$extension file"
                fi
        done

        echo " -> Role $(basename $EMBEDDED_ROLE) is ok"

    file "$EMBEDDED_OS" | grep -q "gzip compressed data" || fatal_error "EMBEDDED variable shall point a gzipped edeploy file"

    EMBEDDED_SIZE=$(du -sm $EMBEDDED_OS | awk '{print $1}')
    FLASH_SIZE=$(( $FLASH_SIZE + $EMBEDDED_SIZE ))
    echo " -> $EMBEDDED_OS is $EMBEDDED_SIZE MB big"

    VERSION_ROLE=$(basename $EMBEDDED_OS | sed 's/.edeploy//g'  | awk -F- '{print $(NF-1)"-"$(NF)}')
    ROLE_NAME=$(basename $EMBEDDED_OS | sed 's/.edeploy//g'  | sed "s/-$VERSION_ROLE//g")

    echo " -> About to install Role $ROLE_NAME with version $VERSION_ROLE"
    FLASH_IMAGE="$IMG-$ver-with-$ROLE_NAME-$VERSION_ROLE.img"
    VDI_IMAGE="$IMG-$ver-with-$ROLE_NAME-$VERSION_ROLE.vdi"
}

umount_flash_fs() {
    step "Umount flash fs"

    umount $BOOT_MOUNT_POINT
}

create_vdi() {
    if ! type -p VBoxManage &>/dev/null; then
        echo "If you need a VirtualBox (VDI) format, please install VirtualBox and restart your make command"
        return
    fi
    step "Creating VDI file for VirtualBox"
    rm -f $VDI_IMAGE &>/dev/null
    VBoxManage convertfromraw $FLASH_IMAGE --format VDI $VDI_IMAGE &>/dev/null
    echo "Virtual Image for VirtualBox is available here : $VDI_IMAGE"
}

install_bootloader() {
    step "Install bootloader"

    mkdir -p $BOOT_MOUNT_POINT/extlinux
    get_extlinux extlinux
    cp extlinux/*.c32 $BOOT_MOUNT_POINT/extlinux/
    extlinux/extlinux --install $BOOT_MOUNT_POINT/extlinux
    if [ $? -ne 0 ]; then
        umount_flash_fs
        fatal_error "Cannot execute extlinux. Please check if your system features a 32bit glibc"
    fi

    umount_flash_fs

    #Installing mbr
    dd if=extlinux/mbr.bin of=$FLASH_IMAGE conv=notrunc
}

check_binary losetup
check_binary sfdisk
check_binary mkfs.ext2
if [ "$MODE" = "health" ]; then
    check_binary mkfs.vfat
fi
check_binary tune2fs

check_embedded_os

prepare_flash_image
prepare_flash_fs

mount_flash_fs
copy_os_to_flash

setup_bootloader $BOOT_MOUNT_POINT
install_bootloader

free_loopbacks

create_vdi
echo "Raw disk image is available here               : $FLASH_IMAGE"
