#!/bin/bash
#
# Copyright (C) 2013 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

VERBOSE=0
SAVED_TO_USB=0
SAVED_TO_NETWORK=0

mknod /dev/null c 1 3

. init.common
exec 3>&1
exec 4>&2

exec > /log 2>&1

tail -f /log > /dev/console &
tpid=$!

save_results() {
# If we do have a session name, let's use it
SESSION_CURL=""
SESSION_FS=""
if [ -n "$SESSION" ]; then
    SESSION_CURL="-F session=$SESSION"
    SESSION_FS="$SESSION"
fi

if [ -d /ahcexport ]; then
    step "Exporting benchmark results to local storage"
    # Saving health-check output to the usb key
    DATE=$(date +%Y_%m_%d-%Hh%M)
    mkdir -p /ahcexport/$SESSION_FS/$DATE/
    mv /*.hw /ahcexport/$SESSION_FS/$DATE
fi

################################################################################
# Send the detected hardware to the server and receive a configuration script
# if there is a match on the server else stop.
################################################################################

step "Saving benchmark results via server ${SERV}"
curl -s -S $SESSION_CURL -F file=@/health.json http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload-health.py &
#Saving curl's PID
PID="$!"

log_n "Awaiting eDeploy server :"
while [ ! -z "$(pidof curl)" ]
    do log_n "."
    sleep 1
done
log "done"

SAVED_TO_USB=0
# Let's save the log status to the usb key
if [ -d /ahcexport ]; then
    cp /log /ahcexport/$SESSION_FS/$DATE
    SAVED_TO_USB=1
fi

#Let's grab curl's return code based on it's pid
wait $PID
RET_CODE=$?
if [ "$RET_CODE" != "0" ]; then
    log "Curl exited as failed ($RET_CODE). Cannot get a configuration from http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload-health.py'"
    SAVED_TO_NETWORK=0
    if [ "$SAVED_TO_USB" = "0" ]; then
        give_up "Both network & USB file saving failed... No result exported."
    fi
else
    SAVED_TO_NETWORK=1
fi
}

################################################################################

step "Create directories"
create_main_directories
rm -rf /var/lock
mkdir -p /var/lock

step "Mounting virtual fs"
mount_virtual_fs

get_system_info

step "Booting environment"
cat /proc/cmdline
uname -a

step "Spawing new shell on tty2"
openvt /bin/bash

eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^DEBUG=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^VERBOSE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONSUCCESS=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^ONFAILURE=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^IP=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^USBBOOT=")

if [ "$VERBOSE" = 1 ]; then
    set -x			# show commands
fi

grep -q '\<quiet\>' /proc/cmdline || log "Loading, please wait..."

probe_kernel_modules

step "Starting services"
if [ -x /etc/init.d/sysklogd ]; then
    /etc/init.d/sysklogd start
fi

if [ -x /etc/init.d/klogd ]; then
    /etc/init.d/klogd start
fi

# It's all over netlink now
echo "" > /proc/sys/kernel/hotplug

start_udev

start_mcelog

################################################################################
# Use the system tag to find the role
################################################################################
serial="$(dmidecode -s system-serial-number | grep -v '#')"

################################################################################
# Hardware detection starts here
################################################################################

probe_pci_devices

step "Starting networking"
start_ssh_server
probe_network_devices

ip a

# This is the default value for both SERV & RSERV
SERV=10.0.0.1
HSERV=
HSERV_PORT=80
RSERV=
RSERV_PORT=873
HTTP_PORT=80
HTTP_PATH=/cgi-bin/
DURATION=
SMOKE_TEST=
SECTION=SERVER

# Unless you override one or the other via the cmdline
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^[HR]?SERV_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PORT=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^HTTP_PATH=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^SESSION=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^RBENCH=")
eval $(cat /proc/cmdline | tr ' ' "\n" | egrep "^SECTION=")

if [ -z "$RSERV" ]; then
    RSERV="$SERV"
fi

get_config_from_cloudinit

if [ -n "$USBBOOT" ]; then
    mkdir -p /ahcexport
    mount /dev/disk/by-label/AHCEXPORT /ahcexport || mount /dev/disk/by-label/ahcexport /ahcexport || give_up "Failed to detect an ahcexport directory when booting on a USB device"
fi

################################################################################
step "Detecting hardware"

cd /
run_detect

show_kernel_modules

show_git_rev

if [ -n "$RBENCH" ]; then
    step "Contacting Benchmark Server ($RBENCH)"
    while true; do
        do_python "/health-client.py /hw.json $RBENCH"
        if [ $? -eq 0 ]; then
            break;
        fi
    sleep $[ ( $RANDOM % 5 )  + 1 ]s
    done
else
    step "Benchmarking system"
    do_python "/health-check.py /hw.json" > /health.json || give_up "Failed to run health-check"

    save_results

    if [ ! -z "$SMOKE" ]; then
        step "Entering Smoke Test for $SMOKE minutes"
        (while true; do
            do_python "/health-check.py hw.json storage-burn" &>/dev/null;
        done
        ) &
        PID_STORAGE="$!"
        PID_CPU="$!"
        (while true; do
            do_python "/health-check.py hw.json memory-burn" &>/dev/null;
        done
        ) &
        PID_MEMORY="$!"
        (while true; do
            do_python "/health-check.py hw.json cpu-burn" &>/dev/null;
        done
        ) &
        PID_CPU="$!"

        sleep ${SMOKE}m

        step "Cleaning Smoke test"
        kill -9 $PID_CPU
        kill -9 $PID_MEMORY
        kill -9 $PID_STORAGE
        pkill -9 -f sysbench
        pkill -9 -f fio
        pkill -9 -f health-check.py

        step "Benchmarking after Smoke test"
        sleep 10
        do_python "/health-check.py hw.json" > /health.json

        save_results
    fi
fi

log "#############################################################################"
log "Benchmarking Complete"
log "Results got saved on :"
if [ "$SAVED_TO_USB" = "1" ]; then
    log " -> USB DEVICE"
fi
if [ "$RET_CODE" = "0" ]; then
    log " -> NETWORK SERVER $SERV"
fi
log "#############################################################################"

if [ -d /ahcexport ]; then
    umount /ahcexport
fi
save_log

case "$ONSUCCESS" in
    "reboot")
        log "Automatic rebooting as required by ONSUCCESS"
        do_reboot
    ;;
    "halt")
        log "Automatic poweroff as required by ONSUCCESS"
        do_halt
    ;;
    "console")
        log "ONSUCCESS=console, launching an interactive shell"
        do_console
    ;;
    *)
        give_up "Unsupported ONSUCCESS=$ONSUCCESS value"
    ;;
esac
