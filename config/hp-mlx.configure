
# -*- python -*-

cli = hpacucli.Cli(debug=True)
cli.launch()

disk1 = var['disk1']
disk2 = var['disk2']
disk3 = var['disk3']
disk4 = var['disk4']
slot = 'slot=' + var['slot1']

run('dmsetup remove_all || /bin/true')

try:
    print '# Removing disks'
    cli.ctrl_delete(slot)
except:
    print 'Failed to delete array, maybe none already existing'
    print 'We can continue to see if we can create everything else'

print '# Creating SSD array'
bootable_disk = cli.ctrl_create_ld(slot, (disk1,), raid='0')
print "# -> %s" % bootable_disk
print "Creating Partitions"
run('dd if=/dev/zero of=%s bs=1M count=100' % bootable_disk)
run('blockdev --rereadpt %s' % bootable_disk)
run('parted -a optimal --script %s mktable gpt' % bootable_disk)
run('parted -a optimal --script %s mkpart primary 0%% 10' % bootable_disk)
run('parted --script %s set 1 boot on' % bootable_disk)
run('parted --script %s set 1 bios_grub on' % bootable_disk)
run('parted -a optimal --script %s mkpart primary ext2 10 256 ' % bootable_disk)
run('parted -a optimal --script %s mkpart primary 257 100%%' % bootable_disk)
run('parted --script %s set 3 lvm on' % bootable_disk)
run('parted --script %s align-check optimal 1' % bootable_disk)
run('parted --script %s align-check optimal 2' % bootable_disk)
run('parted --script %s align-check optimal 3' % bootable_disk)
print "Creating LVM"
run('dmsetup remove_all || /bin/true')
run('pvcreate -ff -y --dataalignment 512k %s%d' % (bootable_disk, 3))
run('vgcreate -f -y --dataalignment 512k rootfs %s%d' % (bootable_disk, 3))
run('lvcreate rootfs -n slash -L 40G')
run('lvcreate rootfs -n swap -L 2G')
print "Creating FS"
run('mkfs.ext4 -L boot -m 0 %s%d' % (bootable_disk,2))
run('mkfs.ext4 -L slash -m 0 -O extent -E stride=32,stripe_width=32 /dev/mapper/rootfs-slash')
run('mkswap -f /dev/mapper/rootfs-swap')
run('mount LABEL=slash /chroot')
run('mkdir /chroot/etc /chroot/boot')
run('mount LABEL=boot /chroot/boot')
fstab = open('/post_rsync/etc/fstab', 'a')
fstab.write('''
/dev/disk/by-id/dm-name-rootfs-swap none swap sw 0 0
LABEL=boot /boot ext4 defaults 0 2
''')
print

print '# Creating BIG data (3x2To) array'
disk = cli.ctrl_create_ld(slot, (disk2,disk3,disk4), raid='5')
var_nodev = disk.replace('/dev/','')
print "# -> %s" % disk
print "Creating Partitions"
run('dd if=/dev/zero of=%s bs=1M count=100' % disk)
run('blockdev --rereadpt %s' % disk)
run('parted -a optimal --script %s mktable gpt' % disk)
run('parted -a optimal --script %s mkpart primary 0%% 100%%' % disk)
run('dmsetup remove_all || /bin/true')
run('mkfs.xfs -f -d agcount=%s -l size=1024m -n size=64k -i size=2048 %s1' % (var['nbcpu'], disk))
run('lvcreate rootfs -n journal-%s1 -L 8G' % (var_nodev) )

ipmi.setup_user(var['ipmi-channel'], 'root', 'pastouche')
ipmi.setup_network(var['ipmi-channel'], var['ip-ipmi'],
                   var['netmask-ipmi'], var['gateway-ipmi'])

open('/post_rsync/etc/network/interfaces', 'w').write('''
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# Ether interface
auto %(eth-pub0)s
iface %(eth-pub0)s inet static
 hwaddress %(mac-pub0)s
 address %(ip)s
 netmask %(netmask)s
 gateway %(gateway)s

# Ib interface FDR
auto %(eth-ib0)s
iface %(eth-ib0)s inet static
  pre-up /etc/init.d/openibd restart
  address %(ib0)s
  netmask %(netmaskib0)s
  gateway %(gatewayib0)s
''' % var)

open('/post_rsync/etc/hostname','w').write('''
%(hostname)s
''' % var)

open('/post_rsync/etc/init/ttyS1.conf', 'w').write('''
# ttyS1 - getty
#
# This service maintains a getty on ttyS1 from the point the system is
# started until it is shut down again.

start on stopped rc or RUNLEVEL=[2345]
stop on runlevel [!2345]

respawn
exec /sbin/getty -L 9600 ttyS1 vt100
''')

open('/post_rsync/etc/default/grub', 'w').write('''
# If you change this file, run 'update-grub' afterwards to update
# /boot/grub/grub.cfg.
# For full documentation of the options in this file, see:
#   info -f grub -n 'Simple configuration'

GRUB_DEFAULT=0
#GRUB_HIDDEN_TIMEOUT=0
#GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
GRUB_CMDLINE_LINUX_DEFAULT=
GRUB_CMDLINE_LINUX="console=tty0 console=ttyS1,9600n8"

# Uncomment to enable BadRAM filtering, modify to suit your needs
# This works with Linux (no patch required) and with any kernel that obtains
# the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)
#GRUB_BADRAM="0x01234567,0xfefefefe,0x89abcdef,0xefefefef"

# Uncomment to disable graphical terminal (grub-pc only)
GRUB_TERMINAL="console serial"
GRUB_SERIAL_COMMAND="serial --speed=9600 --unit=0 --word=8 --parity=no --stop=1"

# The resolution used on graphical terminal
# note that you can use only modes which your graphic card supports via VBE
# you can see them in real GRUB with the command `vbeinfo'
#GRUB_GFXMODE=640x480

# Uncomment if you don't want GRUB to pass "root=UUID=xxx" parameter to Linux
#GRUB_DISABLE_LINUX_UUID=true

# Uncomment to disable generation of recovery mode menu entries
#GRUB_DISABLE_RECOVERY="true"

# Uncomment to get a beep at grub start
#GRUB_INIT_TUNE="480 440 1"
''')

set_role('base', 'D7-F.1.0.0', bootable_disk)
